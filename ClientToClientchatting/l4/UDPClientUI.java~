
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


public class UDPClientUI extends javax.swing.JFrame implements Runnable {

         String line;
         String gotLine, remoteIP, remotePort;
         Thread th = null;
         InetAddress IPAddress;
         DatagramSocket welcomeSocket = null;
         
    /**
     * Creates new form UDPClientUI
     * @param clientPort
     * @throws java.lang.Exception
     */
    public UDPClientUI(int clientPort) throws Exception {
        initComponents();
        
        welcomeSocket = new DatagramSocket(clientPort);
                      
        String myIP = InetAddress.getLocalHost().toString().split("/")[1];
        label1.setText("Connected on socket: " + myIP + ":" + clientPort);
        
        
        th = new Thread(this);
        th.setDaemon(true);
        th.start();
    }
    
    @Override
    public void run(){
        
        while(true){ 
            do{
                   byte[] reciveData = new byte[1024]; 
                   DatagramPacket receivePacket = new DatagramPacket(reciveData, reciveData.length);
                try {
                    welcomeSocket.receive(receivePacket);
                } catch (IOException ex) {
                   
                }
                   gotLine = new String(receivePacket.getData()); 
            }while(gotLine == null);
             
        display.append("Friend: " + gotLine+"\n");
        
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        remoteSocket = new javax.swing.JTextField();
        connectB = new javax.swing.JButton();
        message = new javax.swing.JTextField();
        sendB = new javax.swing.JButton();
        label2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label1.setText("Working on socket: ");

        display.setEditable(false);
        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        remoteSocket.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remoteSocketMouseClicked(evt);
            }
        });

        connectB.setText("Connect");
        connectB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectBMouseClicked(evt);
            }
        });

        message.setText("Start typing ...");
        message.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageMouseClicked(evt);
            }
        });
        message.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageActionPerformed(evt);
            }
        });

        sendB.setText("Send");
        sendB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendBMouseClicked(evt);
            }
        });

        label2.setText("Socket to connect :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remoteSocket, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(connectB))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(message)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendB)))
                        .addGap(0, 4, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(remoteSocket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(connectB)))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendB))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageMouseClicked
        // TODO add your handling code here:
        message.setText("");
        
    }//GEN-LAST:event_messageMouseClicked

    private void messageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_messageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_messageActionPerformed

    private void remoteSocketMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remoteSocketMouseClicked
        // TODO add your handling code here:
        remoteSocket.setText("");
    }//GEN-LAST:event_remoteSocketMouseClicked

    private void connectBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectBMouseClicked
        // TODO add your handling code here:
        String socket = remoteSocket.getText();
        if(!Pattern.matches("^\\s*(.*?):(\\d+)\\s*$", socket)){
            remoteSocket.setText("Enter a valid socket.");
        }else{
            remoteIP = socket.split(":")[0];
            remotePort = socket.split(":")[1];
        }
    }//GEN-LAST:event_connectBMouseClicked

    private void sendBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendBMouseClicked
        // TODO add your handling code here:
        String sendText = message.getText();
        if(sendText == null){
            message.setText("Enter a message to send ....");
        }else{
            try {
                display.append("ME: " + sendText+"\n");
                byte[] sendData = new byte[1024];
                sendData = sendText.getBytes();
                DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName(remoteIP), Integer.parseInt(remotePort));
                try {
                    welcomeSocket.send(sendPacket);
                } catch (IOException ex) {
                   
                }
            } catch (UnknownHostException ex) {
               
            }
        }
    }//GEN-LAST:event_sendBMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        welcomeSocket.close();
    }//GEN-LAST:event_formWindowClosed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws SocketException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
        
        }
        //</editor-fold>

        int port;
        String inputString = null;
        
        do{
            inputString = JOptionPane.showInputDialog(null, "Enter a port for the client");
            if(inputString == null){
                System.exit(-1);
            }
        }while(!Pattern.matches("[1-9][0-9][0-9][0-9]", inputString));
        port = Integer.parseInt(inputString);
        
             try {
                 new UDPClientUI(port).setVisible(true);
             } catch (Exception ex) {
                
             }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectB;
    private javax.swing.JTextArea display;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JTextField message;
    private javax.swing.JTextField remoteSocket;
    private javax.swing.JButton sendB;
    // End of variables declaration//GEN-END:variables



}
